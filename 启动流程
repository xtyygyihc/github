启动流程


一旦启动过程中出现问题，需要排错，只有了解启动流程，才能去排错。任何系统的启动流程是类似的，都分为硬件初始化和操作系统初始化。
主板加电
POST开机自检：电脑主机打开电源的时候，随后会听到滴的一声，系统启动开始了开机自检（POST-power on self test）自检开始），这个过程中主要是检测计算机硬件设备比如：CPU，内存，主板，显卡，CMOS等设备是否有故障存在，如果有硬件故障的话将按两种情况理：对于严重故障(致命性故障)则停机，此时由于各种初始化操作还没完成，不能给出任何提示或信号；对于非严重故障则给出提示或声音报警信号，等待用户处理），如果没有故障，POST完整自己的接力任务，将尾部工作交接给BIOS处理。

启动BIOS
BIOS里面记录了主机板的芯片集与相关设置，如CPU与接口设备的通信频率、启动设备的搜索顺序、硬盘的大小与 类型、系统时间、外部总线、各种接口设备的I/O地址、已经与CPU通信的IRQ中断信息，所以，启动如果要顺利启动，
首先要读取BIOS设置。

BIOS程序被加载到内存执行，释放开，开始执行自检，根据BIOS上的设置，开始启动系统，BIOS上有启动项（硬盘启动还是光驱启动还是网络启动等），
假设从硬盘启动，硬盘要去读取MBR主引导记录，大小是512字节，MBR由446个字节的启动引导其bootloader和64字节的分区表，和2字节的校验位（55AA）构成，接下来和bootloader有关，bootloader是一个程序，专门用来引导操作系统，不同操作系统引导程序不一样，（windows xp用的是Ntblr，Linux用grub）,

bootloader的作用是1，加载操作系统的内核，驱动硬件，2，提供了一个可引导菜单（例如安装双系统，双系统启动时会有个菜单提示启动哪个系统，这个菜单由bootloader提供，这个引导菜单也是一个交互式的程序），一旦选择好系统，就会加载内核，也会加载虚拟文件系统镜像，虚拟文件系统镜像是Linux中特有的东西，叫做initramfs，基于内存的虚拟文件系统

grub功能很丰富，只有446个字节在bootloader中，bootloader要几个级别启动，stage1是一个指针，嵌入在MBR中，通过stage1的指针跳转加载stage2，stage2才是完整的grub程序，stage2在硬盘其他位置中，在boot目录中，可以拿到其他启动配置文件
安装在 /boot/grub/ 目录下
du –sh /boot/grub/   看grub目录大小
目录中的stage1，大小是512字节，stage1是对整个MBR的备份，bootloader（446字节）是一个指针，通过指针找到grub的核心程序stage2，由stage2加载内核，加载虚拟镜像，提供菜单等，
stage2可能不在硬盘上，例如光盘（iso9660），U盘（fat），需要加载文件系统驱动，stage1可以先加载XXX_stage1_5提供文件系统驱动，驱动起来之后再用stage2。
File Stage2  看stage2的相关信息，例如配置文件在哪里
(hd0,0)指的是hd指硬盘，hd0表示第一个硬盘，0表示第一个分区，
df –h   查看挂在信息，第一个硬盘第一个分区  /dev/vda1，其实就是/boot
所以配置文件在/boot/grub/grub.conf
cat /boot/grub/grub.conf
default=0   默认菜单
timeout=5  启动菜单超时5秒进入默认启动内核
splashimage   菜单的背景图片，此时硬盘还没驱动起来，所以通过磁盘位置来访问，压缩的图片，复制到别的位置，gzip –d splash.xpm.gz
hiddenmenu   默认不看menu
title  menu上的标题
root hd0,0  设置boot为根  
kernel   内核文件（/vm…   此时的根不是真正的根，而是boot目录）

ro(read only，不用写里面的内容)  root=…….   加载操作系统真正的根，读其他的模块，在/lib/modules/2.6…/kernel中

下面的是内核运行的参数
最后一行：initrd   虚拟化文件系统，要挂载根，才能驱动其他设备，挂接根，需要命令，命令内核本身没有，命令在根里面，所以虚拟文件系统镜像在内存中提供小型linux系统，提供精简的命令，可以把根挂起来，内核就可以以只读方式读里面的东西了，所以initramfs这个文件就是加载内核和虚拟文件系统镜像，互相配合，将各种周边硬件给驱动起来。
zcat  xxxx.img |cpio –id
其实你会发现里面的目录有点像真的/对吧，所以我们称之为虚拟的根文件系统，作用就是将kernel和真的根文件系统建立关联关系，让kernel去initrd中加载根文件系统所需要的驱动程序，并以读写的方式挂载根文件系统，并让执行
用户当中第一个进程init。
重启系统，进入menu，按e进入编辑界面，三句话就是配置文件最后三句话，可以修改菜单，临时修改，将操作系统启动到单用户模式，
编辑，找到内核那一行（第二行），按e编辑，在最后加上一个参数“ 1”(或者single或者-S)，回车确认修改，按b启动系统，这样就启动了单用户模式（可以维护系统，修改root密码），这样很不安全，所以可以对菜单加密
GRUB菜单加密
grub-md5-crypt
输入密码，生成一串MD5值，这个就是grub密码，复制好这段内容，粘贴到配置文件中
vim /boot/grub/grub.conf   
title那一行的上面加上“password redhat”这样做是明文密码，不安全，所以也可写为“password –-md5 xxxxxxxxx”
这一行要放在title的上面
放在title的下面是系统启动需要密码才可以启动
以上是硬件初始化，硬件激活了，接下来是系统初始化
内核和虚拟文件系统镜像会调用系统的第一个进程init，init初始化自己，标志着系统开始启动
init初始化自己产生相应的事件，第一个就是startup事件，标志系统开始启动，这个startup会读取/etc/init/目录下的文件，目录下的文件会被同时读取，第一个读的是rcS.conf
在这个文件中会启动upstart事件，关闭runlevel事件，脚本执行前，会过滤proc/comline文件，这个文件就是boot/grub/grub.conf下的那个内核选项，内核参数，内核参数中寻找有么有相应的关键字，emergency代表启动的是紧急状态，会启动rcs-emergency的事件，标示系统处于紧急模式中，这个事件被激活，会读取/etc/init/rcs-emergency.conf文件，会把emergency用户的shell改成sulogin，单用户模式用的就是sulogin的shell，简单的shell，命令有限，对系统进行简单救援
如没有emergency，继续执行etc/rc.d/rc.sysinit文件，文件是系统的初始化脚本，系统启动时只执行这一次，在文件中有许多事情，查找当前系统主机名，查找当前网络状态，检测各种状态，输出欢迎信息，读内核参数，做硬件初始化，设置几个控制台终端，加载其他用户自定义模块，配置内核参数，设置系统主机名，同步等待其他存储，会读取etc/inittab，文件存在取出启动级别，如果文件不存在，或者变量没取到，则runlevel是3，对rhel6来说，这个文件并不是必须的，没有也可以启动。

Runlevel 0 是让init关闭所有进程并终止系统。
Runlevel 1 是用来将系统转到单用户模式，单用户模式只能有系统管理员进入，在该模式下处理那些在有登录用户的情况下不能进行更改的文件，改runlevel的编号1也可以用S代替。
Runlevel 2 是允许系统进入多用户的模式，但并不支持文件共享，这种模式很少应用。
Runlevel 3 是最常用的运行模式，主要用来提供真正的多用户模式，也是多数服务器的缺省模式。
Runlevel 4 一般不被系统使用，用户可以设计自己的系统状态并将其应用到runlevel 4阶段，尽管很少使用，但使用该系统可以实现一些特定的登录请求。
Runlevel 5 是将系统初始化为专用的X Window终端。对功能强大的Linux系统来说，这并不是好的选择，但用户如果需要这样，也可以通过在runlevel启动来实现该方案。
Runlevel 6 是关闭所有运行的进程并重新启动系统。



拿到runlevel之后，会触发一个telinit runlevel事件，这个事件读取/etc/init/rc.conf
这个文件会激活相关的runlevel事件，把非这个级别的都关掉，执行etc/rc.d/rcX.d里的脚本  ，X就是runlevel
文件夹里都是软连接，软链接链接到/etc/rc.d/init.d目录下的文件，目录下都是服务的启动脚本，目录和etc/init.d下的内容一样，因为有个软连接在etc下面
rcX.d下的文件K开头表示服务要关闭的，S开头的表示系统启动时要开启的，（例如rc0.d下，几乎都是K打头的），在5里后面的数字标示优先级，数字小优先级高，在6里这些数字无用，因为是并行的，没有依赖关系。
1.查看在各种不同的执行等级中,各项服务的状况:
$chkconfig --list

2.列出系统服务vsftpd在各个执行等级的启动情况：
$chkconfig --list vsftpd

3.在执行等级3,5时，关闭vsftpd系统服务：
$chkconfig --level 35 vsftpd off

4.在执行等级2，3，5时，开启 vsftpd系统服务：
$chkconfig --level 235 vsftpd on

5.关闭一些自己不需要的服务 ->
如果没有打印机：
chkconfig --level 235 cups off 
如果没有局域网：
chkconfig --level 235 smb off
如果不需要远程用户登录的：
chkconfig --level 235 sshd off
如果不需要定时任务的：
chkconfig --level 235 crond off
如果不需要添加新硬件的：
chkconfig --level 235 kudzu off
无论是3还是5的runlevel，最后都会读到S99local文件，链接到/etc/rc.d/rc.local文件
文件说明：这个脚本在所有脚本执行完之后执行，开机过程汇总最后读到的一个文件，这个文件是开机自定义启动脚本，把自己想要执行的命令写进来。系统启动命令也会完成。

读完这个文件就到登陆界面，然后输入用户名密码，bash就启动了。
这三种情况，都有自己的方式对用户进行认证。
（1）命令行登录：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码（Debian还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。
（2）ssh登录：这时系统调用sshd程序（Debian还会再运行/etc/pam.d/ssh ），取代getty和login，然后启动shell。
（3）图形界面登录：init进程调用显示管理器，Gnome图形界面对应的显示管理器为gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。
grub还有个特性，一个特殊的作用，多系统的情况下，将启动任务交给其他的bootloader，（双系统时，需要安装顺序，先装windows再装Linux，例如有个硬盘，第一部分是MBR，接下来可以分区，第一个区装windows xp，安装系统时，MBR中的bootloader是windows的ntblr，windows第一个分区的启动扇区也有一个ntblr，装好后装Linux到剩下的盘，Linux可以选择grub是否也装在MBR中，如果不装，MBR只能启动windows，所以要选择把MBR中的bootloader换成grub，grub既可以启动Linux，又可以启动windows，如果先装linux，MBR中放的是grub，再安装windows，windows会直接覆盖MBR中的grub为ntblr，也不会转交启动，所以要先装windows再装linux）。

文件系统管理
磁盘盘、机械手臂、磁盘读取头与主轴马达所组成
硬盘：磁道，扇区　硬盘的最小单位，柱面是分区时候的最小单位

分区
fdisk –l
/dev/vda  第一块虚拟硬盘
vda1 第一块虚拟硬盘的第一个分区

分区表在MBR中，64字节的分区表
不同的设备容量，分区方式不同，硬盘小于2T，采用MSDOS方式分区，大于2T，采用GPT分区方式（高级存储课程中讲）

MSDOS最多能写四条记录，因为每条记录占16字节
可以分四个主分区
也可以分三个主分区，剩下的空间划分为一个扩展分区，占满剩下的所有空间，理论上可以不占满，但是会浪费空间
在扩展分区中划分逻辑分区，逻辑分区信息记录在扩展分区中（ide硬盘最多63分区）


操作系统分区

fdisk –l /dev/vda   查看分区情况
fdisk /dev/vda   修改分区表
n – 添加新分区
p – 显示分区表
d – 删除分区
q – 不保存退出
w – 保存并退出

添加分区：
做主分区还是做扩展分区，主分区，设置分区标号，开始结束柱面

修改分区标示：
选项t，输入修改第几个分区，设置分区标示（L查询），系统标示主要让管理员知道分区是干什么的。

W保存后注意警告提示，这个分区表已经改完了，但是分区还没产生，重启可以生效，或者执行partprobe（直接操作还是没产生分区）
或者kpartx 还是不行
rhel6的问题，不支持这两个命令，支持partx
partx –a /dev/vda
此时再ls /dev/vda* 就可以看到新的分区了
如果partx还是不管用，只能重启了

分区分完了，要挂载使用
mount /dev/vda3 /media   不能挂载，因为没有指定文件系统类型（设备上面没有文件系统）

需要格式化，创建文件系统
mkfs.ext4 /dev/vda3
然后再挂载使用才可以
df –h 查看挂载信息

最后一个分区创建为扩展分区
扩展分区创建好创建逻辑分区

卸载分区
（前提是退出，不要使用这个分区）
umount /mnt/

新建分区开机不会自动挂载，
cat /etc/fstab     修改这个文件来设置自动挂载（man 5 fstab查看命令说明）
设备名、挂载点、文件系统类型、默认挂在选项、是否对文件系统备份（0不备份，1要备份）、是否检测文件系统（0不检测，数字小优先级高）

设备名最好不要写/dev/vda3 ，因为服务器上有多块硬盘，多次启动时，多个disk可能映射到不同的名字上，所以直接写名字分不清楚的，不唯一，所以每个设备都有个UUID，全球唯一统一标示符，

查看设备UUID
blkid /dev/vda3
（可以在vim中，.! blkid /dev/vda3）
加入一行UUID=XXXXXXX   /mnt  /ext4   default  0 0

mount –a 重新读取etc/fstab，把没有挂载的分区挂载起来，不用重启机器

删除分区：
修改/etc/fstab ，下次开机不要挂载了
umount ，不再使用分区
fdisk  /dev/vda   用d删除（从后往前删），修改了分区表
partx –d –nr 3-4 /dev/vda
